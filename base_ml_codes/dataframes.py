# -*- coding: utf-8 -*-
"""dataframes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3Dvb82dy3JtxhOy09friDpIKxxpgzB7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics

# %matplotlib inline --> Use this line in case you are running in a jupyter notebook

# Data set information and deep dive - https://archive.ics.uci.edu/ml/datasets/Real+estate+valuation+data+set

# Read the dataset and look at the head to gague the column names and whether column names actually exists

df = pd.read_csv('./realestate.csv') # Enter dataset name here

df.head()

shape_data = df.shape# 1.1 of Gradescope tests
print(shape_data)

# Look at the information about the data for better understanding of what you are dealing with, using - info()
df.info()
# Use the describe function to report the max values of all the rows from X2 and X4
df_describe=df.describe()
X2_max = df_describe.loc['max', 'X2 house age']
X4_max = df_describe.loc['max', 'X4 number of convenience stores']
print(X2_max, X4_max)

# Use null check to report how many values are missing for the X3, X4 and Y columns
missing_values=df.isnull().sum()
X3_null = missing_values['X3 distance to the nearest MRT station']# Put the value here -- 1.4 of Gradescope tests
X4_null = missing_values['X4 number of convenience stores']# Put the value here -- 1.5 of Gradescope tests
Y_null = missing_values['Y house price of unit area']# Put the value here -- 1.6 of Gradescope tests
print(X3_null, X4_null, Y_null)

# Perform dropna and find the mean value of the 'X3 distance to the nearest MRT station' column
df_drop = df.copy()
df_drop = df_drop.dropna(axis=0)
mean_X3_drop = df_drop['X3 distance to the nearest MRT station'].mean()
# Put the mean value calculated here -- 1.7 of Gradescope tests
print(mean_X3_drop)

# Perform fillna with median values and report the mean value of the 'X3 distance to the nearest MRT station' column after this - 1.7
df_fill = df.copy()
df_fill = df_fill.fillna(df_fill.median())
mean_X3_fill = df_fill['X3 distance to the nearest MRT station'].mean()
print(mean_X3_fill)

# Now use the new dataframe with filled in data (which is the one you used fillna()on) for all further tasks
# Outlier removal - make sure to remove the outlier as per the following:
# remove all values in 'Y house price of unit area' column with value > 80
# remove all values in 'X3 distance to the nearest MRT station' column with value >
2800
# remove all values in 'X6 longitude' column with value < 121.50
dataframe = df_fill.copy()
dataframe = dataframe[(dataframe['Y house price of unit area'] <= 80) &
                      (dataframe['X3 distance to the nearest MRT station'] <= 2800) &
                      (dataframe['X6 longitude'] >= 121.50)]

# YOUR CODE HERE
# Here the Y column has price per unit area as 10000 New Taiwan Dollar/ Ping where 1 NTD = 0.03 USD and 1 Ping = 3.3 meter^2 --> thus use the Pandas apply function to convert the unit to USD/ m^2
# Conversion facor to be used = 10000 NTD/ Ping * 91 = USD/m^2 i.e ==> current * conversion factor
# To complete this, use the apply() function
conversion_factor = 91
dataframe['Y house price of unit area'] = dataframe['Y house price of unit area'].apply(lambda x: x * conversion_factor)

# Perform Normalization on the data (hint: check MinMaxScaler()) -- report the mean of the Y column after this
from sklearn import preprocessing
scaler = preprocessing.MinMaxScaler()
normalized = scaler.fit_transform(dataframe)
# YOUR CODE HERE
# Note make sure you pay heed to the data type of normalized
normalized_df = pd.DataFrame(normalized, columns=dataframe.columns)
# YOUR CODE HERE to convert normalized back to a dataframe
mean_norm_Y = normalized_df['Y house price of unit area'].mean()
print(mean_norm_Y)
# Put the mean value of the 'Y house price of unit area' column after Norm, here - 1.9 of Gradescope tests

print(dataframe[['Y house price of unit area']])

def age_classifier(age):
    if age < 10:
        return 'New'
    elif age < 30:
        return 'Middle'
    else:
        return 'Old'

# Assuming you already have the df_fill DataFrame with filled data
df_age_classify = dataframe.copy()

# Apply the age_classifier function to create the 'Age Class' column
df_age_classify['Age Class'] = df_age_classify['X2 house age'].apply(lambda x: age_classifier(x))

# Count the number of houses in each category
New_count = (df_age_classify['Age Class'] == 'New').sum()
Middle_count = (df_age_classify['Age Class'] == 'Middle').sum()
Old_count = (df_age_classify['Age Class'] == 'Old').sum()

print("Count of houses classified as 'New':", New_count)
print("Count of houses classified as 'Middle':", Middle_count)
print("Count of houses classified as 'Old':", Old_count)

# Reset the index and set the 'No' column as the Index (this helps to learn how touse the serial number column in dsets where it's present and can be effectively used).
# Use set_index()
reindex_df = dataframe.copy().set_index('No')
# Find index where the column price per unit area has the maximum value
max_id = reindex_df['Y house price of unit area'].idxmax()
print(max_id)

max_row = reindex_df.loc[max_id]
# Report the transaction date, house age and number of convenience stores for this house at idmax index
txn_dt = max_row['X1 transaction date']
house_age = max_row['X2 house age']
conv_st = max_row['X4 number of convenience stores']

print(txn_dt, house_age, conv_st)

# Subset the dataframe querying for House Age less than or equal to 9 years and Price of Unit Area greater than 27
age_price_df = reindex_df[(reindex_df['X2 house age'] <= 9) & (reindex_df['Y house price of unit area'] > 27)]
# Group the mean of the 'Y house price of unit area' column based on the 'X4 number of convenience stores' and find out mean value of the Y col when X4 col value is 7.
# Use the groupby() function
grouped_age_price_df = age_price_df.groupby('X4 number of convenience stores')['Y house price of unit area'].mean()
# Report the mean value when number of convenience stores = 7 --> 7th index of the series object (Use this documentation for what functions you may use to get the desired value: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html)
# round the value to the nearest 2 decimal places
mean_val_conv_7 = grouped_age_price_df.loc[7]
mean_val_conv_7 = round(mean_val_conv_7, 2)
print(mean_val_conv_7)

plt.figure(figsize=(6, 5))
grouped_age_price_df.plot.bar()
plt.title('Mean House Price based on Convenience store proximity')
plt.xlabel('Number of convenience stores')
plt.ylabel('Price of unit area')
plt.show()